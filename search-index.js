var searchIndex = {};
searchIndex['smtp'] = {"items":[[0,"","smtp","# Rust SMTP library"],[0,"client","","SMTP client"],[1,"Configuration","smtp::client","Represents the configuration of a client"],[11,"connection_reuse_count_limit","","Maximum connection reuse",0],[11,"enable_connection_reuse","","Enable connection reuse",0],[11,"destination_recipient_limit","","Maximum recipients",0],[11,"line_length_limit","","Maximum line length",0],[11,"hello_name","","Name sent during HELO or EHLO",0],[1,"Client","","Structure that implements the SMTP client"],[0,"server_info","","Information about a server"],[1,"ServerInfo","smtp::client::server_info","Contains information about an SMTP server"],[11,"name","","Server name",1],[11,"esmtp_features","","ESMTP features supported by the server",1],[10,"clone","","",1],[10,"fmt","","",1],[10,"supports_feature","","Checks if the server supports an ESMTP feature",1],[0,"connecter","smtp::client","TODO"],[6,"Connecter","smtp::client::connecter","A trait for the concept of opening a stream connected to a IP socket address."],[9,"connect","","TODO",2],[9,"peer_name","","TODO",2],[10,"connect","std::io::net::tcp","",3],[10,"peer_name","","",3],[0,"stream","smtp::client","TODO"],[6,"ClientStream","smtp::client::stream","TODO"],[9,"send_and_get_response","","TODO",4],[9,"get_reply","","TODO",4],[9,"read_into_string","","TODO",4],[10,"send_and_get_response","std::io::net::tcp","Sends a string to the server and gets the response",3],[10,"read_into_string","","Reads on the stream into a string",3],[10,"get_reply","","Gets the SMTP response",3],[10,"clone","smtp::client","",0],[10,"new","","Creates a new SMTP client",5],[10,"localhost","","Creates a new local SMTP client to port 25",5],[10,"set_hello_name","","Set the name used during HELO or EHLO",5],[10,"set_enable_connection_reuse","","Set the maximum number of emails sent using one connection",5],[10,"set_connection_reuse_count_limit","","Set the maximum number of emails sent using one connection",5],[10,"set_configuration","","Set the client configuration",5],[10,"close","","Closes the SMTP transaction if possible",5],[10,"reset","","Reset the client state",5],[10,"send","","Sends an email",5],[10,"connect","","Connects to the configured server",5],[10,"is_connected","","Checks if the server is connected using the NOOP SMTP command",5],[10,"helo","","Send a HELO command and fills `server_info`",5],[10,"ehlo","","Sends a EHLO command and fills `server_info`",5],[10,"mail","","Sends a MAIL command",5],[10,"rcpt","","Sends a RCPT command",5],[10,"data","","Sends a DATA command",5],[10,"message","","Sends the message content",5],[10,"quit","","Sends a QUIT command",5],[10,"rset","","Sends a RSET command",5],[10,"noop","","Sends a NOOP command",5],[10,"vrfy","","Sends a VRFY command",5],[10,"expn","","Sends a EXPN command",5],[0,"command","smtp","SMTP command"],[2,"Command","smtp::command","Supported SMTP commands"],[12,"Connect","","A fake command to represent the connection step",6],[12,"StartTls","","Start a TLS tunnel",6],[12,"ExtendedHello","","Extended Hello command",6],[12,"Hello","","Hello command",6],[12,"Mail","","Mail command, takes optional options",6],[12,"Recipient","","Recipient command, takes optional options",6],[12,"Data","","Data command",6],[12,"Message","","A fake command to represent the message content",6],[12,"Reset","","Reset command",6],[12,"Verify","","Verify command, takes optional options",6],[12,"Expand","","Expand command, takes optional options",6],[12,"Help","","Help command, takes optional options",6],[12,"Noop","","Noop command",6],[12,"Quit","","Quit command",6],[10,"clone","","",6],[10,"eq","","",6],[10,"ne","","",6],[10,"fmt","","",6],[10,"is_ascii","","Tests if the `Command` is ASCII-only",6],[10,"test_success","","Tests if the command was successful",6],[0,"extension","smtp","ESMTP features"],[2,"Extension","smtp::extension","Supported ESMTP keywords"],[12,"EightBitMime","","8BITMIME keyword",7],[12,"SmtpUtfEight","","SMTPUTF8 keyword",7],[12,"StartTls","","STARTTLS keyword",7],[12,"Size","","SIZE keyword",7],[10,"clone","","",7],[10,"eq","","",7],[10,"ne","","",7],[10,"fmt","","",7],[10,"from_str","","",7],[10,"same_extension_as","","Checks if the ESMTP keyword is the same",7],[10,"parse_esmtp_response","","Parses supported ESMTP features",7],[10,"client_mail_option","","Returns the string to add to the mail command",7],[0,"response","smtp","SMTP response, containing a mandatory return code, and an optional text message"],[1,"Response","smtp::response","Contains an SMTP reply, with separed code and message"],[11,"code","","Server response code",8],[11,"message","","Server response string (optional)",8],[10,"clone","","",8],[10,"eq","","",8],[10,"ne","","",8],[10,"fmt","","",8],[10,"from_str","","",8],[0,"transaction","smtp","State of an SMTP transaction"],[2,"TransactionState","smtp::transaction","Contains the state of the current transaction"],[12,"Unconnected","","No connection was established",9],[12,"Connected","","The connection was successful and the banner was received",9],[12,"HelloSent","","An HELO or EHLO was successful",9],[12,"MailSent","","A MAIL command was successful send",9],[12,"RecipientSent","","At least one RCPT command was sucessful",9],[12,"DataSent","","A DATA command was successful",9],[10,"eq","","",9],[10,"ne","","",9],[10,"fmt","","",9],[10,"new","","Returns the initial state",9],[10,"is_allowed","","Tests if the given command is allowed in the current state",9],[10,"next_state","","Returns the state resulting of the given command",9],[0,"common","smtp","Constants defined in SMTP RFCs"],[5,"SMTP_PORT","smtp::common","Default smtp port"],[5,"SMTPS_PORT","","Default smtps port"],[5,"SUBMISSION_PORT","","Default submission port"],[5,"SP","","The word separator for SMTP transactions"],[5,"CRLF","","The line ending for SMTP transactions (carriage return + line feed)"],[5,"CR","","Carriage return"],[5,"LF","","Line feed"],[5,"COLON","","Colon"],[5,"MESSAGE_ENDING","","The ending of message content"],[0,"error","smtp","Error and result type for SMTP clients"],[1,"SmtpError","smtp::error","smtp error type"],[11,"kind","","Error kind",10],[11,"desc","","Error description",10],[11,"detail","","Error cause",10],[2,"ErrorKind","","An enum of all error kinds."],[12,"TransientError","","Transient error",11],[12,"PermanentError","","permanent error",11],[12,"UnknownError","","Unknown error",11],[12,"InternalIoError","","IO error",11],[4,"SmtpResult","","SMTP result type"],[10,"fmt","","",11],[10,"clone","","",11],[10,"eq","","",11],[10,"ne","","",11],[10,"fmt","","",10],[10,"clone","","",10],[10,"eq","","",10],[10,"ne","","",10],[10,"from_error","","",10],[10,"from_error","","",10],[10,"from_error","","",10],[10,"from_error","","",10],[10,"description","","",10],[10,"detail","","",10],[10,"cause","","",10],[0,"tools","smtp","Tools for common string manipulations"],[3,"remove_trailing_crlf","smtp::tools","Removes the trailing line return at the end of a string"],[3,"get_first_word","","Returns the first word of a string, or the string if it contains no space"],[3,"escape_crlf","","Returns the string replacing all the CRLF with \"\\<CRLF\\>\""],[3,"escape_dot","","Returns the string after adding a dot at the beginning of each line starting with a dot"],[0,"sendable_email","smtp","SMTP sendable email"],[1,"SimpleSendableEmail","smtp::sendable_email","Minimal email structure"],[6,"SendableEmail","","Email sendable by an SMTP client"],[9,"from_address","","From address",12],[9,"to_addresses","","To addresses",12],[9,"message","","Message content",12],[9,"set_message_id","","Set message-ID header",12],[10,"new","","Returns a new email",13],[10,"from_address","","",13],[10,"to_addresses","","",13],[10,"message","","",13],[10,"set_message_id","","",13],[0,"mailer","smtp","Simple email (very incomplete)"],[1,"Email","smtp::mailer","Simple email representation"],[0,"header","","Simple SMTP headers"],[2,"Header","smtp::mailer::header","Contains a header"],[12,"To","","`To`",14],[12,"From","","`From`",14],[12,"Cc","","`Cc`",14],[12,"ReplyTo","","`Reply-To`",14],[12,"Sender","","`Sender`",14],[12,"Date","","`Date`",14],[12,"Subject","","`Subject`",14],[12,"MimeVersion","","`MIME-Version`",14],[12,"ContentType","","`Content-Type`",14],[12,"MessageId","","`Message-Id`",14],[12,"Other","","Any header (name, value)",14],[6,"ToHeader","","Converts to an `Header`"],[9,"to_header","","Converts to an `Header` struct",15],[10,"to_header","","",14],[10,"clone","","",14],[10,"eq","","",14],[10,"ne","","",14],[10,"fmt","","",14],[10,"new","","Creates ah `Header`",14],[0,"address","smtp::mailer","Simple SMTP \"address\" (very incomplete)"],[1,"Address","smtp::mailer::address","Contains an address with an optionnal alias"],[6,"ToAddress","","Converts an adress or an address with an alias to an `Address`"],[9,"to_address","","Converts to an `Address` struct",16],[10,"to_address","","",17],[10,"clone","","",17],[10,"eq","","",17],[10,"ne","","",17],[10,"fmt","","",17],[10,"new","","Creates an address",17],[10,"get_address","","Return only the address",17],[10,"clone","smtp::mailer","",18],[10,"eq","","",18],[10,"ne","","",18],[10,"fmt","","",18],[10,"new","","Creates a new empty email",18],[10,"clear","","Clear the email content",18],[10,"body","","Sets the email body",18],[10,"add_header","","Add a generic header",18],[10,"from","","Adds a `From` header and store the sender address",18],[10,"to","","Adds a `To` header and store the recipient address",18],[10,"cc","","Adds a `Cc` header and store the recipient address",18],[10,"reply_to","","Adds a `Reply-To` header",18],[10,"sender","","Adds a `Sender` header",18],[10,"subject","","Adds a `Subject` header",18],[10,"date_now","","Adds a `Date` header with the current date",18],[10,"date","","Adds a `Date` header with the given date",18],[10,"to_addresses","","Return the to addresses, and fails if it is not set",18],[10,"from_address","","Return the from address, and fails if it is not set",18],[10,"message","","",18],[10,"set_message_id","","Adds a `Message-ID` header",18]],"paths":[[1,"Configuration"],[1,"ServerInfo"],[6,"Connecter"],[1,"TcpStream"],[6,"ClientStream"],[1,"Client"],[2,"Command"],[2,"Extension"],[1,"Response"],[2,"TransactionState"],[1,"SmtpError"],[2,"ErrorKind"],[6,"SendableEmail"],[1,"SimpleSendableEmail"],[2,"Header"],[6,"ToHeader"],[6,"ToAddress"],[1,"Address"],[1,"Email"]]};
searchIndex['time'] = {"items":[[0,"","time","Simple time handling."],[1,"Timespec","","A record specifying a time value in seconds and nanoseconds."],[11,"sec","","",0],[11,"nsec","","",0],[1,"Tm","","Holds a calendar date and time broken down into its components (year, month, day, and so on),\nalso called a broken-down time value."],[11,"tm_sec","","Seconds after the minute - [0, 60]",1],[11,"tm_min","","Minutes after the hour - [0, 59]",1],[11,"tm_hour","","Hours after midnight - [0, 23]",1],[11,"tm_mday","","Day of the month - [1, 31]",1],[11,"tm_mon","","Months since January - [0, 11]",1],[11,"tm_year","","Years since 1900",1],[11,"tm_wday","","Days since Sunday - [0, 6]. 0 = Sunday, 1 = Monday, ..., 6 = Saturday.",1],[11,"tm_yday","","Days since January 1 - [0, 365]",1],[11,"tm_isdst","","Daylight Saving Time flag.",1],[11,"tm_utcoff","","Identifies the time zone that was used to compute this broken-down time value, including any\nadjustment for Daylight Saving Time. This is the number of seconds east of UTC. For example,\nfor U.S. Pacific Daylight Time, the value is -7*60*60 = -25200.",1],[11,"tm_nsec","","Nanoseconds after the second - [0, 10<sup>9</sup> - 1]",1],[1,"TmFmt","","A wrapper around a `Tm` and format string that implements Show."],[2,"ParseError","",""],[12,"InvalidSecond","","",2],[12,"InvalidMinute","","",2],[12,"InvalidHour","","",2],[12,"InvalidDay","","",2],[12,"InvalidMonth","","",2],[12,"InvalidYear","","",2],[12,"InvalidDayOfWeek","","",2],[12,"InvalidDayOfMonth","","",2],[12,"InvalidDayOfYear","","",2],[12,"InvalidZoneOffset","","",2],[12,"InvalidTime","","",2],[12,"MissingFormatConverter","","",2],[12,"InvalidFormatSpecifier","","",2],[12,"UnexpectedCharacter","","",2],[3,"get_time","","Returns the current time as a `timespec` containing the seconds and\nnanoseconds since 1970-01-01T00:00:00Z."],[3,"precise_time_ns","","Returns the current value of a high-resolution performance counter\nin nanoseconds since an unspecified epoch."],[3,"precise_time_s","","Returns the current value of a high-resolution performance counter\nin seconds since an unspecified epoch."],[3,"tzset","",""],[3,"empty_tm","",""],[3,"at_utc","","Returns the specified time in UTC"],[3,"now_utc","","Returns the current time in UTC"],[3,"at","","Returns the specified time in the local timezone"],[3,"now","","Returns the current time in the local timezone"],[3,"strptime","","Parses the time from the string according to the format string."],[3,"strftime","","Formats the time according to the format string."],[10,"fmt","","",0],[10,"decode","","",0],[10,"encode","","",0],[10,"cmp","","",0],[10,"partial_cmp","","",0],[10,"lt","","",0],[10,"le","","",0],[10,"gt","","",0],[10,"ge","","",0],[10,"eq","","",0],[10,"ne","","",0],[10,"clone","","",0],[10,"new","","",0],[10,"add","","",0],[10,"sub","","",0],[10,"fmt","","",1],[10,"eq","","",1],[10,"ne","","",1],[10,"clone","","",1],[10,"to_timespec","","Convert time to the seconds from January 1, 1970",1],[10,"to_local","","Convert time to the local timezone",1],[10,"to_utc","","Convert time to the UTC",1],[10,"ctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC, in the local timezone.",1],[10,"asctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC.",1],[10,"strftime","","Formats the time according to the format string.",1],[10,"rfc822","","Returns a TmFmt that outputs according to RFC 822.",1],[10,"rfc822z","","Returns a TmFmt that outputs according to RFC 822 with Zulu time.",1],[10,"rfc3339","","Returns a TmFmt that outputs according to RFC 3339. RFC 3339 is\ncompatible with ISO 8601.",1],[10,"eq","","",2],[10,"ne","","",2],[10,"fmt","","",2],[10,"fmt","","",3]],"paths":[[1,"Timespec"],[1,"Tm"],[2,"ParseError"],[1,"TmFmt"]]};

searchIndex['uuid'] = {"items":[[0,"","uuid","Generate and parse UUIDs"],[1,"Uuid","","A Universally Unique Identifier (UUID)"],[2,"UuidVersion","","The version of the UUID, denoting the generating algorithm"],[12,"Mac","","Version 1: MAC address",0],[12,"Dce","","Version 2: DCE Security",0],[12,"Md5","","Version 3: MD5 hash",0],[12,"Random","","Version 4: Random",0],[12,"Sha1","","Version 5: SHA-1 hash",0],[2,"UuidVariant","","The reserved variants of UUIDs"],[12,"NCS","","Reserved by the NCS for backward compatibility",1],[12,"RFC4122","","As described in the RFC4122 Specification (default)",1],[12,"Microsoft","","Reserved by Microsoft for backward compatibility",1],[12,"Future","","Reserved for future expansion",1],[2,"ParseError","","Error details for string parsing failures"],[12,"InvalidLength","","",2],[12,"InvalidCharacter","","",2],[12,"InvalidGroups","","",2],[12,"InvalidGroupLength","","",2],[4,"UuidBytes","","A 128-bit (16 byte) buffer containing the ID"],[10,"eq","","",0],[10,"ne","","",0],[10,"eq","","",1],[10,"ne","","",1],[10,"hash","","",3],[10,"fmt","","",2],[10,"nil","","Returns a nil or empty UUID (containing all zeroes)",3],[10,"new","","Create a new UUID of the specified version",3],[10,"new_v4","","Creates a new random UUID",3],[10,"from_fields","","Creates a UUID using the supplied field values",3],[10,"from_bytes","","Creates a UUID using the supplied bytes",3],[10,"get_variant","","Returns the variant of the UUID structure",3],[10,"get_version_num","","Returns the version number of the UUID",3],[10,"get_version","","Returns the version of the UUID",3],[10,"as_bytes","","Return an array of 16 octets containing the UUID data",3],[10,"to_simple_string","","Returns the UUID as a string of 16 hexadecimal digits",3],[10,"to_hyphenated_string","","Returns a string of hexadecimal digits, separated into groups with a hyphen.",3],[10,"to_urn_string","","Returns the UUID formatted as a full URN string",3],[10,"parse_str","","Parses a UUID from a string of hexadecimal digits with optional hyphens",3],[10,"is_nil","","Tests if the UUID is nil",3],[10,"default","","Returns the nil UUID, which is all zeroes",3],[10,"clone","","Returns a copy of the UUID",3],[10,"from_str","","Parse a hex string and interpret as a UUID",3],[10,"fmt","","",3],[10,"eq","","",3],[10,"encode","","Encode a UUID as a hyphenated string",3],[10,"decode","","Decode a UUID from a string",3],[10,"rand","","",3]],"paths":[[2,"UuidVersion"],[2,"UuidVariant"],[2,"ParseError"],[1,"Uuid"]]};

searchIndex['gcc'] = {"items":[[0,"","gcc",""],[1,"Config","","Extra configuration to pass to gcc."],[11,"include_directories","","Directories where gcc will look for header files.",0],[11,"definitions","","Additional definitions (`-DKEY` or `-DKEY=VALUE`).",0],[11,"objects","","Additional object files to link into the final archive",0],[3,"compile_library","","Compile a library from the given set of input C files."],[10,"default","","",0]],"paths":[[1,"Config"]]};

initSearch(searchIndex);
